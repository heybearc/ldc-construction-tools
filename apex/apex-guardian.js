#!/usr/bin/env node

/**
 * APEX Guardian - Intelligent Wrapper
 * 
 * This file is auto-generated by apex-smart-sync.js
 * It loads the core APEX system and applies repository-specific configuration
 */

const fs = require('fs');
const path = require('path');

class APEXGuardian {
  constructor() {
    // Load project configuration
    this.projectConfig = this.loadConfig('config/project.json');
    this.environmentConfig = this.loadConfig('config/environments.json');
    this.overrides = this.loadConfig('config/overrides.json') || {};
    
    // Apply configuration hierarchy
    this.config = this.mergeConfigs();
  }

  loadConfig(configPath) {
    const fullPath = path.join(__dirname, configPath);
    if (fs.existsSync(fullPath)) {
      return JSON.parse(fs.readFileSync(fullPath, 'utf8'));
    }
    return null;
  }

  mergeConfigs() {
    // Merge configuration with hierarchy: core defaults < project < environment < overrides
    return {
      ...this.projectConfig,
      environments: this.environmentConfig,
      ...this.overrides
    };
  }

  async executeCommand(command, reason = '') {
    console.log(`üîß APEX: ${reason || 'Executing command'}`);
    console.log(`   Command: ${command}`);
    
    try {
      const { promisify } = require('util');
      const exec = promisify(require('child_process').exec);
      const result = await exec(command);
      console.log(`‚úÖ Command successful`);
      if (result.stdout.trim()) {
        console.log(`   Output: ${result.stdout.trim()}`);
      }
      return result.stdout;
    } catch (error) {
      console.error(`‚ùå Command failed: ${error.message}`);
      throw error;
    }
  }

  async test(container) {
    console.log(`üõ°Ô∏è APEX Guardian: Executing login-test on ${container}`);
    
    try {
      const env = this.getEnvironmentByContainer(container);
      if (!env) {
        throw new Error(`Environment not found for container: ${container}`);
      }

      const testUrl = `http://${env.ip}:${env.ports.frontend}${this.config.authentication.endpoints.signin}`;
      const credentials = this.config.authentication.credentials;
      
      const curlCommand = `curl -X POST -F "email=${credentials.testUser}" -F "password=${credentials.testPassword}" ${testUrl} -s`;
      
      const result = await this.executeCommand(curlCommand, 'Testing authentication');
      
      if (result.includes('error') || result.includes('Error')) {
        throw new Error(`Authentication test failed: ${result}`);
      }
      
      console.log('‚úÖ Login test completed successfully');
      return { login: 'success', dashboard: 'redirect' };
      
    } catch (error) {
      console.error(`‚ùå login-test failed: ${error.message}`);
      throw error;
    }
  }

  getEnvironmentByContainer(container) {
    for (const [envName, envConfig] of Object.entries(this.config.environments)) {
      if (envConfig.container === container) {
        return envConfig;
      }
    }
    return null;
  }

  async start(container) {
    console.log(`üõ°Ô∏è APEX Guardian: Starting guarded application on container ${container}`);
    
    const env = this.getEnvironmentByContainer(container);
    if (!env) {
      throw new Error(`Environment not found for container: ${container}`);
    }

    const sshCommand = `ssh ${env.sshHost} "pct exec ${container} -- bash -c 'cd /opt/${this.config.projectName}/frontend && pkill -f \"next dev\" && sleep 2 && npm run dev > /dev/null 2>&1 &'"`;
    
    try {
      await this.executeCommand(sshCommand, 'Starting application');
      console.log('‚úÖ Application started successfully');
    } catch (error) {
      console.error(`‚ùå Failed to start application: ${error.message}`);
      throw error;
    }
  }
}

// CLI Interface
if (require.main === module) {
  const guardian = new APEXGuardian();
  const [,, action, container] = process.argv;

  if (!action || !container) {
    console.log('Usage: node apex-guardian.js [start|test] [container]');
    process.exit(1);
  }

  guardian[action](container)
    .then(result => {
      if (result) {
        console.log(`‚úÖ Guardian ${action} completed:`, result);
      }
    })
    .catch(error => {
      console.error(`‚ùå Guardian ${action} failed:`, error.message);
      process.exit(1);
    });
}

module.exports = APEXGuardian;
