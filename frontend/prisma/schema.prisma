generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  firstName          String?
  lastName           String?
  role               UserRole            @default(READ_ONLY)
  status             UserStatus          @default(INVITED)
  regionId           String              @default("01.12")
  zoneId             String              @default("01")
  passwordHash       String?
  lastLogin          DateTime?
  loginCount         Int                 @default(0)
  invitedBy          String?
  invitedAt          DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  sessions           Session[]
  sentInvitations    UserInvitation[]    @relation("InvitedBy")
  CrewMembers        CrewMembers[]
  TradeTeamMembers   TradeTeamMembers[]
  auditLogs          AuditLog[]
  projectAssignments ProjectAssignment[]
  roleAssignments    RoleAssignment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserInvitation {
  id              String           @id @default(cuid())
  email           String
  firstName       String
  lastName        String
  role            UserRole
  regionId        String
  zoneId          String
  invitedBy       String
  invitationToken String           @unique
  expiresAt       DateTime
  status          InvitationStatus @default(PENDING)
  sentAt          DateTime?
  acceptedAt      DateTime?
  remindersSent   Int              @default(0)
  lastReminderAt  DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  invitedByUser   User             @relation("InvitedBy", fields: [invitedBy], references: [id])
}

model EmailConfiguration {
  id                   String    @id @default(cuid())
  provider             String
  displayName          String
  smtpHost             String?
  smtpPort             Int?
  username             String?
  appPasswordEncrypted String?
  fromEmail            String
  fromName             String
  encryption           String?
  isDefault            Boolean   @default(false)
  isActive             Boolean   @default(true)
  testStatus           String    @default("untested")
  lastTested           DateTime?
  regionId             String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@map("email_configurations")
}

model Role {
  id                 String              @id @default(cuid())
  name               String              @unique
  displayName        String
  description        String?
  type               RoleType
  scope              RoleScope
  level              Int                 @default(0)
  permissions        String[]
  isActive           Boolean             @default(true)
  regionId           String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  projectAssignments ProjectAssignment[]
  assignments        RoleAssignment[]

  @@map("roles")
}

model RoleAssignment {
  id                   String         @id @default(cuid())
  userId               String
  roleId               String
  assignmentType       AssignmentType
  scope                String?
  startDate            DateTime       @default(now())
  endDate              DateTime?
  isActive             Boolean        @default(true)
  assignedBy           String
  consultationRequired Boolean        @default(false)
  consultationStatus   String?
  notes                String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  role                 Role           @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, scope])
  @@map("role_assignments")
}

model RoleChangeLog {
  id               String   @id @default(cuid())
  roleAssignmentId String?
  userId           String
  roleId           String
  action           String
  previousData     String?
  newData          String?
  reason           String?
  performedBy      String
  impactAssessment String?
  createdAt        DateTime @default(now())

  @@map("role_change_logs")
}

model Project {
  id                String              @id @default(cuid())
  name              String
  description       String?
  status            ProjectStatus       @default(PLANNING)
  priority          ProjectPriority     @default(MEDIUM)
  regionId          String
  zoneId            String?
  startDate         DateTime?
  endDate           DateTime?
  estimatedDuration Int?
  actualDuration    Int?
  budget            Decimal?            @db.Decimal(10, 2)
  actualCost        Decimal?            @db.Decimal(10, 2)
  projectManager    String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  assignments       ProjectAssignment[]

  @@map("projects")
}

model ProjectAssignment {
  id             String         @id @default(cuid())
  projectId      String
  userId         String
  roleId         String
  assignmentType AssignmentType
  startDate      DateTime       @default(now())
  endDate        DateTime?
  isActive       Boolean        @default(true)
  assignedBy     String
  notes          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  project        Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role           Role           @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId, roleId])
  @@map("project_assignments")
}

model TradeTeam {
  id               String             @id @default(cuid())
  name             String             @unique
  description      String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  TradeTeamMembers TradeTeamMembers[]
  crews            Crew[]

  @@map("trade_teams")
}

model Crew {
  id          String        @id @default(cuid())
  name        String
  description String?
  tradeTeamId String
  status      CrewStatus    @default(ACTIVE)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CrewMembers CrewMembers[]
  tradeTeam   TradeTeam     @relation(fields: [tradeTeamId], references: [id], onDelete: Cascade)

  @@map("crews")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  category    String
  subject     String
  htmlContent String
  textContent String?
  variables   Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model CrewMembers {
  A     String
  B     String
  crews Crew   @relation(fields: [A], references: [id], onDelete: Cascade)
  User  User   @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_CrewMembers_AB_pkey")
  @@index([B], map: "_CrewMembers_B_index")
  @@map("_CrewMembers")
}

model TradeTeamMembers {
  A           String
  B           String
  trade_teams TradeTeam @relation(fields: [A], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [B], references: [id], onDelete: Cascade)

  @@id([A, B], map: "_TradeTeamMembers_AB_pkey")
  @@index([B], map: "_TradeTeamMembers_B_index")
  @@map("_TradeTeamMembers")
}

enum UserRole {
  SUPER_ADMIN
  ZONE_OVERSEER
  PERSONNEL_CONTACT
  CONSTRUCTION_GROUP_OVERSEER
  TRADE_TEAM_OVERSEER
  FIELD_REP
  READ_ONLY
}

enum UserStatus {
  INVITED
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum InvitationStatus {
  PENDING
  SENT
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum RoleType {
  TRADE_TEAM_OVERSEER
  TRADE_TEAM_ASSISTANT
  TRADE_TEAM_SUPPORT
  CREW_OVERSEER
  CREW_ASSISTANT
  CREW_SUPPORT
  CREW_VOLUNTEER
  ZONE_OVERSEER
  PERSONNEL_CONTACT
  SUPER_ADMIN
}

enum RoleScope {
  GLOBAL
  REGIONAL
  PROJECT
  TEAM
}

enum AssignmentType {
  BRANCH_APPOINTED
  FIELD_CONTINUOUS
  FIELD_TEMPORARY
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CrewStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum EmailProvider {
  GMAIL
  CUSTOM_SMTP
}

enum EmailSecurity {
  NONE
  SSL_TLS
  STARTTLS
}
