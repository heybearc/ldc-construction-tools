// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models (Required for Prisma Adapter)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  
  // LDC Construction Tools specific fields
  firstName     String?
  lastName      String?
  role          UserRole  @default(READ_ONLY)
  status        UserStatus @default(INVITED)
  regionId      String    @default("01.12")
  zoneId        String    @default("01")
  passwordHash  String?
  
  // Authentication tracking
  lastLogin     DateTime?
  loginCount    Int       @default(0)
  
  // Invitation tracking
  invitedBy     String?
  invitedAt     DateTime?
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  sentInvitations UserInvitation[] @relation("InvitedBy")
  roleAssignments RoleAssignment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// LDC Construction Tools Models
model UserInvitation {
  id              String     @id @default(cuid())
  email           String
  firstName       String
  lastName        String
  role            UserRole
  regionId        String
  zoneId          String
  
  // Invitation details
  invitedBy       String
  invitedByUser   User       @relation("InvitedBy", fields: [invitedBy], references: [id])
  invitationToken String     @unique
  expiresAt       DateTime
  
  // Status tracking
  status          InvitationStatus @default(PENDING)
  sentAt          DateTime?
  acceptedAt      DateTime?
  
  // Reminder tracking
  remindersSent   Int        @default(0)
  lastReminderAt  DateTime?
  
  // Timestamps
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model EmailConfiguration {
  id                    String   @id @default(cuid())
  provider              String   // 'gmail', 'smtp', etc.
  displayName           String
  smtpHost              String?
  smtpPort              Int?
  username              String?
  appPasswordEncrypted  String?  // Encrypted app password
  fromEmail             String
  fromName              String
  encryption            String?  // 'tls', 'ssl', 'none'
  isDefault             Boolean  @default(false)
  isActive              Boolean  @default(true)
  testStatus            String   @default("untested") // 'untested', 'success', 'failed'
  lastTested            DateTime?
  regionId              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("email_configurations")
}

// Role Management Models
model Role {
  id                    String   @id @default(cuid())
  name                  String   @unique
  displayName           String
  description           String?
  type                  RoleType
  scope                 RoleScope
  level                 Int      @default(0) // For hierarchy (higher = more permissions)
  permissions           String[] // JSON array of permission strings
  isActive              Boolean  @default(true)
  regionId              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  assignments           RoleAssignment[]
  
  @@map("roles")
}

model RoleAssignment {
  id                    String   @id @default(cuid())
  userId                String
  roleId                String
  assignmentType        AssignmentType
  scope                 String?  // Project ID, Team ID, or Region ID
  startDate             DateTime @default(now())
  endDate               DateTime?
  isActive              Boolean  @default(true)
  assignedBy            String   // User ID who made the assignment
  consultationRequired  Boolean  @default(false)
  consultationStatus    String?  // 'pending', 'approved', 'rejected'
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role                  Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId, scope])
  @@map("role_assignments")
}

model RoleChangeLog {
  id                    String   @id @default(cuid())
  roleAssignmentId      String?
  userId                String
  roleId                String
  action                String   // 'assigned', 'removed', 'modified'
  previousData          String?  // JSON of previous state
  newData               String?  // JSON of new state
  reason                String?
  performedBy           String   // User ID who performed the action
  impactAssessment      String?
  createdAt             DateTime @default(now())

  @@map("role_change_logs")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ZONE_OVERSEER
  PERSONNEL_CONTACT
  CONSTRUCTION_GROUP_OVERSEER
  TRADE_TEAM_OVERSEER
  FIELD_REP
  READ_ONLY
}

enum UserStatus {
  INVITED
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum InvitationStatus {
  PENDING
  SENT
  ACCEPTED
  EXPIRED
  CANCELLED
}

// Role Management Enums
enum RoleType {
  TRADE_TEAM_OVERSEER
  TRADE_TEAM_ASSISTANT
  TRADE_TEAM_SUPPORT
  CREW_OVERSEER
  CREW_ASSISTANT
  CREW_SUPPORT
  CREW_VOLUNTEER
  ZONE_OVERSEER
  PERSONNEL_CONTACT
  SUPER_ADMIN
}

enum RoleScope {
  GLOBAL      // System-wide permissions
  REGIONAL    // Region-specific permissions
  PROJECT     // Project-specific permissions
  TEAM        // Team-specific permissions
}

enum AssignmentType {
  BRANCH_APPOINTED      // Appointed by branch
  FIELD_CONTINUOUS      // Field-assigned continuous
  FIELD_TEMPORARY       // Field-assigned temporary
}
