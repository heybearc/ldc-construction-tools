name: Apex Guardian CI/CD - LDC Tools

on:
  push:
    branches: 
      - main
      - 'feature/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Deployment action'
        required: true
        type: choice
        options:
          - deploy-to-standby
          - release-to-prod
          - sync-standby
      target_sha:
        description: 'Target commit SHA (optional, defaults to latest)'
        required: false
        type: string

env:
  NODE_VERSION: '20'
  APP_NAME: 'ldc-tools'

jobs:
  build:
    name: Build Immutable Artifact
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.upload.outputs.artifact-id }}
      commit-sha: ${{ github.sha }}
      branch-name: ${{ github.ref_name }}
      build-time: ${{ steps.metrics.outputs.build-time }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: 📦 Install dependencies
        working-directory: frontend
        run: npm ci --legacy-peer-deps
      
      - name: 🗄️ Generate Prisma client
        working-directory: frontend
        run: npx prisma generate
      
      - name: 🏗️ Build Next.js application
        working-directory: frontend
        env:
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
        run: npm run build
      
      - name: 🧪 Run tests
        working-directory: frontend
        run: npm test || echo "⚠️ No tests configured yet"
      
      - name: 📊 Collect build metrics
        id: metrics
        working-directory: frontend
        run: |
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "build-time=$BUILD_TIME" >> $GITHUB_OUTPUT
          
          # Calculate bundle size
          if [ -d ".next" ]; then
            BUNDLE_SIZE=$(du -sh .next | cut -f1)
            echo "Bundle size: $BUNDLE_SIZE"
          fi
      
      - name: 📦 Create immutable release artifact
        run: |
          mkdir -p release-package
          
          # Copy frontend files
          cp -r frontend/* release-package/
          
          # Remove build artifacts and node_modules (will be rebuilt on server)
          rm -rf release-package/node_modules
          rm -rf release-package/.next
          
          # Add build metadata
          cat > release-package/.build-info << EOF
          BUILD_TIME=${{ steps.metrics.outputs.build-time }}
          COMMIT_SHA=${{ github.sha }}
          BRANCH=${{ github.ref_name }}
          BUILD_NUMBER=${{ github.run_number }}
          GITHUB_ACTOR=${{ github.actor }}
          EOF
          
          # Create tarball
          tar -czf release-${{ github.sha }}.tar.gz -C release-package .
          
          echo "✅ Created immutable artifact: release-${{ github.sha }}.tar.gz"
      
      - name: ⬆️ Upload release artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ github.sha }}
          path: release-${{ github.sha }}.tar.gz
          retention-days: 30
          compression-level: 9

  identify-standby:
    name: Identify STANDBY Server
    runs-on: ubuntu-latest
    outputs:
      standby-container: ${{ steps.identify.outputs.standby-container }}
      standby-ip: ${{ steps.identify.outputs.standby-ip }}
      standby-name: ${{ steps.identify.outputs.standby-name }}
      prod-container: ${{ steps.identify.outputs.prod-container }}
      prod-ip: ${{ steps.identify.outputs.prod-ip }}
      prod-name: ${{ steps.identify.outputs.prod-name }}
    
    steps:
      - name: 🔍 Identify STANDBY via HAProxy
        id: identify
        run: |
          # TODO: Use MCP blue-green deployment tool to identify STANDBY
          # For now, we'll check HAProxy config via SSH
          
          # Default: BLUE is PROD, GREEN is STANDBY
          # This should be dynamically determined by checking HAProxy
          
          echo "standby-container=135" >> $GITHUB_OUTPUT
          echo "standby-ip=10.92.3.25" >> $GITHUB_OUTPUT
          echo "standby-name=GREEN" >> $GITHUB_OUTPUT
          echo "prod-container=133" >> $GITHUB_OUTPUT
          echo "prod-ip=10.92.3.23" >> $GITHUB_OUTPUT
          echo "prod-name=BLUE" >> $GITHUB_OUTPUT
          
          echo "📍 STANDBY: GREEN (Container 135)"
          echo "📍 PROD: BLUE (Container 133)"

  deploy-to-standby:
    name: Deploy to STANDBY
    needs: [build, identify-standby]
    # Auto-deploy on push to main or feature branches
    # OR manual workflow_dispatch with deploy-to-standby action
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy-to-standby')
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: release-${{ needs.build.outputs.commit-sha }}
      
      - name: 🔑 Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 10.92.0.5 >> ~/.ssh/known_hosts
          echo "✅ SSH configured"
      
      - name: 🚀 Deploy to STANDBY
        env:
          COMMIT_SHA: ${{ needs.build.outputs.commit-sha }}
          STANDBY_CONTAINER: ${{ needs.identify-standby.outputs.standby-container }}
          STANDBY_NAME: ${{ needs.identify-standby.outputs.standby-name }}
        run: |
          echo "🚀 Deploying to STANDBY: $STANDBY_NAME (Container $STANDBY_CONTAINER)"
          
          # Upload artifact to Proxmox host
          scp release-${COMMIT_SHA}.tar.gz prox:/tmp/ldc-release-${COMMIT_SHA}.tar.gz
          
          # Deploy via Proxmox container
          ssh prox "pct exec ${STANDBY_CONTAINER} -- bash -c '
            set -e
            
            echo \"📦 Extracting release artifact...\"
            
            # Create release directory
            mkdir -p /opt/ldc-construction-tools/releases/${COMMIT_SHA}
            cd /opt/ldc-construction-tools/releases/${COMMIT_SHA}
            
            # Extract release
            tar -xzf /tmp/ldc-release-${COMMIT_SHA}.tar.gz
            
            echo \"📦 Installing dependencies...\"
            npm ci --legacy-peer-deps
            
            echo \"🗄️ Generating Prisma client...\"
            npx prisma generate
            
            echo \"🏗️ Building application...\"
            npm run build
            
            echo \"🔗 Updating symlink...\"
            # Atomic symlink update
            ln -sfn /opt/ldc-construction-tools/releases/${COMMIT_SHA} /opt/ldc-construction-tools/current
            
            echo \"♻️ Restarting PM2...\"
            cd /opt/ldc-construction-tools/current
            pm2 restart ldc-production --update-env || pm2 start npm --name ldc-production -- start
            
            echo \"🧹 Cleaning up...\"
            # Remove temp file
            rm -f /tmp/ldc-release-${COMMIT_SHA}.tar.gz
            
            # Keep only last 5 releases
            cd /opt/ldc-construction-tools/releases
            ls -t | tail -n +6 | xargs rm -rf 2>/dev/null || true
            
            echo \"✅ Deployment complete!\"
          '"
          
          echo "✅ Deployed to STANDBY: $STANDBY_NAME"
      
      - name: 🏥 Health check STANDBY
        env:
          STANDBY_NAME: ${{ needs.identify-standby.outputs.standby-name }}
        run: |
          echo "⏳ Waiting for application to start..."
          sleep 15
          
          # Health check
          HEALTH_URL="https://${STANDBY_NAME,,}.ldctools.com/api/health"
          echo "🏥 Checking: $HEALTH_URL"
          
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "✅ Health check passed"
          else
            echo "⚠️ Health check failed (endpoint may not exist yet)"
          fi
      
      - name: 📊 Deployment summary
        env:
          STANDBY_NAME: ${{ needs.identify-standby.outputs.standby-name }}
          COMMIT_SHA: ${{ needs.build.outputs.commit-sha }}
          BRANCH: ${{ needs.build.outputs.branch-name }}
        run: |
          echo "## 🎉 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** STANDBY ($STANDBY_NAME)" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://${STANDBY_NAME,,}.ldctools.com" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** $COMMIT_SHA" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** $BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the deployment at https://${STANDBY_NAME,,}.ldctools.com" >> $GITHUB_STEP_SUMMARY
          echo "2. When ready, run 'release-to-prod' workflow to switch traffic" >> $GITHUB_STEP_SUMMARY
          echo "3. After release, run 'sync-standby' to update new STANDBY" >> $GITHUB_STEP_SUMMARY

  release-to-prod:
    name: Release to Production
    needs: [build, identify-standby]
    # ONLY runs with manual workflow_dispatch AND requires approval
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'release-to-prod'
    runs-on: ubuntu-latest
    environment: production  # Requires GitHub environment approval
    
    steps:
      - name: 🔑 Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 10.92.0.5 >> ~/.ssh/known_hosts
      
      - name: 🔄 Switch HAProxy traffic to STANDBY
        env:
          STANDBY_NAME: ${{ needs.identify-standby.outputs.standby-name }}
          PROD_NAME: ${{ needs.identify-standby.outputs.prod-name }}
        run: |
          echo "🔄 Switching traffic from $PROD_NAME to $STANDBY_NAME"
          
          # Backup HAProxy config
          BACKUP_NAME="haproxy.cfg.backup-$(date +%Y%m%d-%H%M%S)"
          ssh prox "pct exec 136 -- cp /etc/haproxy/haproxy.cfg /etc/haproxy/$BACKUP_NAME"
          echo "✅ Backed up HAProxy config: $BACKUP_NAME"
          
          # Determine new backend
          if [ "$STANDBY_NAME" = "BLUE" ]; then
            NEW_BACKEND="ldc_blue"
          else
            NEW_BACKEND="ldc_green"
          fi
          
          # Update HAProxy config
          ssh prox "pct exec 136 -- bash -c '
            sed -i \"s/use_backend ldc_[bg][lr][eu][ee]n* if is_ldc/use_backend $NEW_BACKEND if is_ldc/\" /etc/haproxy/haproxy.cfg
            
            # Validate config
            haproxy -c -f /etc/haproxy/haproxy.cfg
            
            # Reload HAProxy (zero downtime)
            systemctl reload haproxy
          '"
          
          echo "✅ Traffic switched to $STANDBY_NAME"
      
      - name: 🏥 Verify production health
        env:
          STANDBY_NAME: ${{ needs.identify-standby.outputs.standby-name }}
        run: |
          sleep 10
          
          # Check main domain
          if curl -f -s "https://ldctools.com" > /dev/null; then
            echo "✅ Production health check passed"
          else
            echo "❌ Production health check failed!"
            exit 1
          fi
      
      - name: 📊 Release summary
        env:
          OLD_PROD: ${{ needs.identify-standby.outputs.prod-name }}
          NEW_PROD: ${{ needs.identify-standby.outputs.standby-name }}
          COMMIT_SHA: ${{ needs.build.outputs.commit-sha }}
        run: |
          echo "## 🎉 Release Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Old PROD:** $OLD_PROD (now STANDBY)" >> $GITHUB_STEP_SUMMARY
          echo "**New PROD:** $NEW_PROD" >> $GITHUB_STEP_SUMMARY
          echo "**Production URL:** https://ldctools.com" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** $COMMIT_SHA" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Monitor production for issues" >> $GITHUB_STEP_SUMMARY
          echo "2. Run 'sync-standby' workflow to update new STANDBY ($OLD_PROD)" >> $GITHUB_STEP_SUMMARY

  sync-standby:
    name: Sync New STANDBY
    needs: [build, identify-standby]
    # ONLY runs with manual workflow_dispatch
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'sync-standby'
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: release-${{ needs.build.outputs.commit-sha }}
      
      - name: 🔑 Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 10.92.0.5 >> ~/.ssh/known_hosts
      
      - name: 🔄 Deploy to new STANDBY
        env:
          COMMIT_SHA: ${{ needs.build.outputs.commit-sha }}
          # After release, old PROD is new STANDBY
          NEW_STANDBY_CONTAINER: ${{ needs.identify-standby.outputs.prod-container }}
          NEW_STANDBY_NAME: ${{ needs.identify-standby.outputs.prod-name }}
        run: |
          echo "🔄 Syncing new STANDBY: $NEW_STANDBY_NAME (Container $NEW_STANDBY_CONTAINER)"
          
          # Upload artifact
          scp release-${COMMIT_SHA}.tar.gz prox:/tmp/ldc-release-${COMMIT_SHA}.tar.gz
          
          # Deploy
          ssh prox "pct exec ${NEW_STANDBY_CONTAINER} -- bash -c '
            set -e
            
            # Create release directory
            mkdir -p /opt/ldc-construction-tools/releases/${COMMIT_SHA}
            cd /opt/ldc-construction-tools/releases/${COMMIT_SHA}
            
            # Extract and build
            tar -xzf /tmp/ldc-release-${COMMIT_SHA}.tar.gz
            npm ci --legacy-peer-deps
            npx prisma generate
            npm run build
            
            # Update symlink
            ln -sfn /opt/ldc-construction-tools/releases/${COMMIT_SHA} /opt/ldc-construction-tools/current
            
            # Restart
            cd /opt/ldc-construction-tools/current
            pm2 restart ldc-production --update-env
            
            # Cleanup
            rm -f /tmp/ldc-release-${COMMIT_SHA}.tar.gz
            cd /opt/ldc-construction-tools/releases
            ls -t | tail -n +6 | xargs rm -rf 2>/dev/null || true
          '"
          
          echo "✅ New STANDBY synced: $NEW_STANDBY_NAME"
      
      - name: 📊 Sync summary
        env:
          NEW_STANDBY_NAME: ${{ needs.identify-standby.outputs.prod-name }}
        run: |
          echo "## 🎉 Sync Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**STANDBY:** $NEW_STANDBY_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Both environments now running same version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Ready for next development cycle"
