#!/bin/bash
# Interactive specification updater
set -euo pipefail

MODULE_NAME=$1
CHANGE_TYPE=${2:-"enhancement"}

if [ -z "$MODULE_NAME" ]; then
    echo "Usage: $0 <module-name> [change-type]"
    echo "Change types: enhancement, bug-fix, compliance, integration"
    exit 1
fi

SPEC_FILE="lib/$MODULE_NAME/specs/feature.md"

if [ ! -f "$SPEC_FILE" ]; then
    echo "‚ùå Specification file not found: $SPEC_FILE"
    exit 1
fi

echo "üìù Updating specification for module: $MODULE_NAME"
echo "Change type: $CHANGE_TYPE"
echo ""

# Backup current spec
BACKUP_FILE="$SPEC_FILE.backup.$(date +%Y%m%d_%H%M%S)"
cp "$SPEC_FILE" "$BACKUP_FILE"
echo "‚úÖ Backup created: $BACKUP_FILE"

# Interactive prompts for changes
echo ""
echo "üìã Specification Update Interview"
echo "=================================="

read -p "What is the summary of this change? " CHANGE_SUMMARY
read -p "What is the business justification? " BUSINESS_JUSTIFICATION
read -p "Are there API changes? (y/n) " API_CHANGES
read -p "Are there database changes? (y/n) " DB_CHANGES
read -p "Are there UI changes? (y/n) " UI_CHANGES
read -p "What is the estimated effort (story points)? " EFFORT_ESTIMATE

# Generate change log entry
CHANGE_DATE=$(date +%Y-%m-%d)
VERSION=$(grep -E "^## Version" "$SPEC_FILE" | head -1 | sed 's/## Version //' || echo "1.0.0")
NEW_VERSION=$(echo $VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')

# Create updated specification
cat > /tmp/spec_update.md << EOF
# Feature Specification: $MODULE_NAME

## Change Log
| Version | Date | Author | Changes |
|---------|------|--------|---------|
| $NEW_VERSION | $CHANGE_DATE | $(whoami) | $CHANGE_SUMMARY |

## Change Details

### Change Type: $CHANGE_TYPE

### Business Justification
$BUSINESS_JUSTIFICATION

### Technical Impact
- **API Changes**: $([ "$API_CHANGES" = "y" ] && echo "Yes" || echo "No")
- **Database Changes**: $([ "$DB_CHANGES" = "y" ] && echo "Yes" || echo "No")
- **UI Changes**: $([ "$UI_CHANGES" = "y" ] && echo "Yes" || echo "No")

### Effort Estimate
$EFFORT_ESTIMATE story points

### Implementation Notes
$([ "$API_CHANGES" = "y" ] && echo "- Update OpenAPI contract")
$([ "$DB_CHANGES" = "y" ] && echo "- Create database migration scripts")
$([ "$UI_CHANGES" = "y" ] && echo "- Update React components")

---

EOF

# Append existing content (skip old change log)
sed '/^## Change Log/,/^---$/d' "$SPEC_FILE" >> /tmp/spec_update.md

# Replace original file
mv /tmp/spec_update.md "$SPEC_FILE"

echo ""
echo "‚úÖ Specification updated successfully!"
echo "üìÅ File: $SPEC_FILE"
echo "üíæ Backup: $BACKUP_FILE"

# Generate tasks based on changes
echo ""
echo "üìã Generated Implementation Tasks:"

if [ "$API_CHANGES" = "y" ]; then
    echo "  - Update OpenAPI contract: lib/$MODULE_NAME/contracts/openapi.yaml"
    echo "  - Regenerate API client code"
    echo "  - Update API integration tests"
fi

if [ "$DB_CHANGES" = "y" ]; then
    echo "  - Create database migration script"
    echo "  - Update database schema documentation"
    echo "  - Test migration rollback procedures"
fi

if [ "$UI_CHANGES" = "y" ]; then
    echo "  - Update React components"
    echo "  - Update component tests"
    echo "  - Update UI integration tests"
fi

echo "  - Update module documentation"
echo "  - Update integration tests"
echo "  - Update deployment procedures"

# Offer to regenerate contract if API changes
if [ "$API_CHANGES" = "y" ]; then
    echo ""
    read -p "Regenerate OpenAPI contract now? (y/n) " REGEN_CONTRACT
    if [ "$REGEN_CONTRACT" = "y" ]; then
        echo "üîÑ Regenerating OpenAPI contract..."
        ./bin/generate-contract "$MODULE_NAME"
    fi
fi

echo ""
echo "üéØ Next Steps:"
echo "1. Review the updated specification"
echo "2. Update implementation code"
echo "3. Update tests"
echo "4. Validate changes with stakeholders"
echo "5. Deploy to staging for testing"
