#!/usr/bin/env bash
# Generate OpenAPI contract for a feature
set -euo pipefail

FEATURE_NAME="${1:-}"
if [[ -z "$FEATURE_NAME" ]]; then
  echo "Usage: $0 <feature-name>"
  echo "Example: $0 role-management"
  exit 1
fi

FEATURE_DIR="lib/$FEATURE_NAME"
if [[ ! -d "$FEATURE_DIR" ]]; then
  echo "Error: Feature directory $FEATURE_DIR does not exist"
  echo "Run: bin/new-feature $FEATURE_NAME"
  exit 1
fi

# Generate comprehensive OpenAPI contract
cat > "$FEATURE_DIR/contracts/openapi.yaml" <<YAML
openapi: 3.0.3
info:
  title: $FEATURE_NAME API
  version: 1.0.0
  description: |
    API for $FEATURE_NAME module in LDC Construction Tools.
    This module provides functionality for managing $FEATURE_NAME operations.
  contact:
    name: LDC Construction Tools Team
    email: support@ldc-construction-tools.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://staging.ldc-construction-tools.com/api/v1
    description: Staging server
  - url: https://ldc-construction-tools.com/api/v1
    description: Production server

paths:
  /$FEATURE_NAME:
    get:
      summary: List all $FEATURE_NAME items
      description: Retrieve a paginated list of $FEATURE_NAME items
      tags:
        - $FEATURE_NAME
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term for filtering
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      \$ref: '#/components/schemas/${FEATURE_NAME^}Item'
                  pagination:
                    \$ref: '#/components/schemas/Pagination'
        '400':
          \$ref: '#/components/responses/BadRequest'
        '401':
          \$ref: '#/components/responses/Unauthorized'
        '500':
          \$ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create a new $FEATURE_NAME item
      description: Create a new $FEATURE_NAME item with the provided data
      tags:
        - $FEATURE_NAME
      requestBody:
        required: true
        content:
          application/json:
            schema:
              \$ref: '#/components/schemas/Create${FEATURE_NAME^}Request'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                \$ref: '#/components/schemas/${FEATURE_NAME^}Item'
        '400':
          \$ref: '#/components/responses/BadRequest'
        '401':
          \$ref: '#/components/responses/Unauthorized'
        '409':
          \$ref: '#/components/responses/Conflict'
        '500':
          \$ref: '#/components/responses/InternalServerError'

  /$FEATURE_NAME/{id}:
    get:
      summary: Get a specific $FEATURE_NAME item
      description: Retrieve a specific $FEATURE_NAME item by ID
      tags:
        - $FEATURE_NAME
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier for the $FEATURE_NAME item
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                \$ref: '#/components/schemas/${FEATURE_NAME^}Item'
        '404':
          \$ref: '#/components/responses/NotFound'
        '401':
          \$ref: '#/components/responses/Unauthorized'
        '500':
          \$ref: '#/components/responses/InternalServerError'
    
    put:
      summary: Update a $FEATURE_NAME item
      description: Update an existing $FEATURE_NAME item
      tags:
        - $FEATURE_NAME
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier for the $FEATURE_NAME item
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              \$ref: '#/components/schemas/Update${FEATURE_NAME^}Request'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                \$ref: '#/components/schemas/${FEATURE_NAME^}Item'
        '400':
          \$ref: '#/components/responses/BadRequest'
        '401':
          \$ref: '#/components/responses/Unauthorized'
        '404':
          \$ref: '#/components/responses/NotFound'
        '500':
          \$ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete a $FEATURE_NAME item
      description: Delete an existing $FEATURE_NAME item
      tags:
        - $FEATURE_NAME
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier for the $FEATURE_NAME item
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Item deleted successfully
        '401':
          \$ref: '#/components/responses/Unauthorized'
        '404':
          \$ref: '#/components/responses/NotFound'
        '500':
          \$ref: '#/components/responses/InternalServerError'

  /$FEATURE_NAME/health:
    get:
      summary: Health check
      description: Check the health status of the $FEATURE_NAME module
      tags:
        - Health
      responses:
        '200':
          description: Module is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"

components:
  schemas:
    ${FEATURE_NAME^}Item:
      type: object
      required:
        - id
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier
        name:
          type: string
          description: Name of the item
          maxLength: 255
        description:
          type: string
          description: Description of the item
          maxLength: 1000
        status:
          type: string
          enum: [active, inactive, pending]
          description: Current status
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        created_by:
          type: integer
          format: int64
          description: ID of the user who created this item
        updated_by:
          type: integer
          format: int64
          description: ID of the user who last updated this item

    Create${FEATURE_NAME^}Request:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the item
          maxLength: 255
        description:
          type: string
          description: Description of the item
          maxLength: 1000
        status:
          type: string
          enum: [active, inactive, pending]
          default: active
          description: Initial status

    Update${FEATURE_NAME^}Request:
      type: object
      properties:
        name:
          type: string
          description: Name of the item
          maxLength: 255
        description:
          type: string
          description: Description of the item
          maxLength: 1000
        status:
          type: string
          enum: [active, inactive, pending]
          description: Current status

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Items per page
        total:
          type: integer
          description: Total number of items
        pages:
          type: integer
          description: Total number of pages

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error details

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            \$ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            \$ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            \$ref: '#/components/schemas/Error'
    
    Conflict:
      description: Resource conflict
      content:
        application/json:
          schema:
            \$ref: '#/components/schemas/Error'
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            \$ref: '#/components/schemas/Error'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: $FEATURE_NAME
    description: Operations related to $FEATURE_NAME management
  - name: Health
    description: Health check operations
YAML

echo "✅ Generated OpenAPI contract: $FEATURE_DIR/contracts/openapi.yaml"
echo "📄 Contract includes:"
echo "   - CRUD operations"
echo "   - Health check endpoint"
echo "   - Comprehensive schemas"
echo "   - Error responses"
echo "   - Security definitions"
